/* 

    Единицы измерения угла поворота
    deg - градусы - rotate(90deg)
    grad - грады - rotate(100grad)
    rad - радианы - rotate(1.57rad)
    turn - обороты - rotate(0.25turn)

*/

/* 
    Трансформация позволяет пробразовывать элементы в двухмерном и трехменорм пространствах.

    Двухмерные трансформации:
    transform: rotate(45deg); - поворот на 45 градусов по часовой
    transform: scale(2); - масштабирование/увеличен в два раза. Задается относительно единицы.
    transform: scalex(0.5); - по оси x уменшься в два раза. Так же можно задать и для направлениий y и z
    x - горизонт
    y - вертикаль
    z - глубина масштабирования
    Можно использовать для создания эффекта отражения, для этого нужно передать отрицательное значение 
    в функции scale() - scale(-2), scale(-1)

    transform: translateX(x); - перемещение по оси х
    transform: translateY(y); - перемещение по оси у
    Можно задать сразу два - transform: translate(x, y);

    transform: skew(-50grad); - искажение на -50 град

*/
/*  
    -moz-transform - Firefox
    -o-transform - Opera
    -webkit-transform - Safari

    transform-origin: 50% 50%; - точка относительно которой... Трансформирует относительно центрально точки, которую можно перместить
    По умолчанию стоит 50% 50%

    perspective: 1000; - перспектива - применяется при трансформации элемента, определяет расстояние
    в пикселях от плоскости дочерних элементов до точки из которой пользователь как бы смотрит на них.

    opacity:0.5; - прозрачность

*/
/* 
    3D - сильно нагружает браузер
    Трехмерные трансформации:
    Все описанные ранее двухмерные трансформации работают также как и в трехмерной трансформации, 
    но добавляется еще одно направление и писать 3d
    scale3d(1.2, 1.5, 1.1);
    rotate3d(1, 0, 1, 140deg);
    translate3d(10px, 5px, 20px);
    
    отображает в 3d-пространстве:
    transform-style: preserve-3d; - Дочерние элементы будут отображаться в 3d пространстве.
    transform-style: flat; - Дочерние элементы лежат в той же плоскости, что и их родитель

    обратная сторона элемента:
    backface-visibility: visible;
    backface-visibility: hidden;
*/

/* 
    Градиент
    -webkit-liner-gradient - создает линейный градиент в браузерах safari и chrome
    background-image: -webkit-liner-gradient([<угол>|<позция>,]<цвет>[,<цвет>]*)



*/

/********************************************************************************* 
Анимация:
    :hover - при наведении

    transition - универсальное свойство, которое позволяет одновременно задать значения.
    Устанавливает эффект перехода между двумя состояниями элемента.
    transition-property: all;- width, opacity, color... - указывает css свойства, которые будут задейстовавны для создания перехода.
    transition-diration: 2.3s;- 0, 134ms, 0.3s... -  указывает время,  втечении которого будет совершен переход.
    transition-timing-function: ease;- linear, ease-in... - указывает функцию смягчения отвечающую за плавность выполнения перехода.
    transition-delay: 500ms; 3s, 230ms - устанавливает величину задержки перед началом выполнения перехода.

    сокращенный вариант:
    transition: width 2.3s linear 500ms;

    transition-timing-function:
    linear - переход будет иметь одинаковую скорость на протяжении всего времени выполнения;
    ease - переход будет иметь медленную скорость выполнения в начале, потом начнет ускоряться и снова замедляется в конце - значение по умолчанию
    ease-in - переход будет иметь медленную скорость выполнения в начале;
    ease-out - переход будет иметь медленную скорость выполнения в конце;
    ease-in-out - переход будет иметь медленную скорость выполнения в начлале и в конце;
    cubic-function(x,x,x,x) - позваляет задать плавность выполнения перехода с помощью фукции. Функции принимает значение от 0 до 1.

    steps() - шаги
    steps(3) - пауза возникает при запуске анимации. (Эта функция соотвествует steps(3, end), т.к. значение end используется по умолчанию)
    steps(3, end) - пауза возникает при запуске анимации.
    steos(3, starts) - анимация запускается сразу, пауза появляется в конце.

    @keyframes:
    from - оформление элемента в начале анимации
    to - оформление элемента в конце анимации
    0% - оформление элемента в начале анимации
    100% - оформление элемента в конце анимации

    animation:
    animation-name: name; - имя анимации
    animation-duration: 0.5s; - длительность
    animation-delay: 0.3s; - задержка
    animation-timing-function: liner; - плавность изменения - описывает метод расчета промежуточных значений свойств для анимации
    animation-iteration-count: 5; - установить количество повторов анимации. Infinity - бесконечно
    animation-direction: normal | reverse | alternate; - порядок выполнения анимации (анимация должна выполняться в обратном порядке в четные разы и в нормальном в нечетные)
    reverse - задом наперед
    animation-play-state: running | paused; - запустить или приостановить анимацию
    animation-fill-mode: forwards | backwards | both; - определяет, будет ли видмым эффект от анимации, когда сама анимация уже закончилась (можно указать несколько через запятую)
    
    none - эффект от анимации будет наблюдаться лишь в течение времени анимации
    forwards - эффект от анимации будет виден даже тогда, когда анимация закончилась (после заверщения анимации элемент полуачет
    не начальные значения, а какие-то промежуточные из анимации) 
    backwards - начальный ключевой кадр анимации будет отображаться в течение всего времени задержки анимации
    (имеет смысл применять только к анимациям с ненулевой задержкой)
    both - начальный ключевой кадр анимации будет отображаться в течение всго времени задержки анимации, а последний будет отображаться даже тогда, когда анимация закончилась 
    (имеет смысл применять только к анимациям с ненулевой задержкой)
**********************************************************************************/



*{
    margin: 0;
    padding: 0;
}

.world{
    width: 100%;
    min-height: 100vh;
    background-image: url(../img/sky.jpg);
    background-size: cover;
    position: relative;
    overflow-x: hidden;
    /* все что выходит за горизонт x, будет спрятано */
}

.highway{
    background-image: url(../img/road.jpg);
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1;
    height: 200px;
    width: 500%;
    display: block;
    background-repeat: repeat-x;
    animation: highway 5s linear infinite;
    /* создает анимацию со своим именем на 5 секунд, где переход будет медленным и бесконечным */
}

/* @keyframes - свойство анимации с именем */
@keyframes highway{
    100%{
        transform: translateX(-3400px);
    }
}

.city{
    background-image: url(../img/city.png);
    height: 250px;
    width: 500%;
    background-repeat: repeat-x;
    position: absolute;
    left: 0;
    bottom: 200px;
    display: block;
    z-index: 1;
    animation: city 20s linear infinite;
}

@keyframes city{
    100%{
        transform: translateX(-1500px);
    }
}

.car{
    width: 400px;
    position: absolute;
    left: 50%;
    bottom: 100px;
    z-index: 2;
    transform: translateX(-100%);
}

.car img{
    width: 100%;
    animation: car 1s linear infinite;
}

@keyframes car{
    0%{
        transform: translateY(-1px);
    }
    50%{
        transform: translateY(1px);
    }
    100%{
        transform: translateY(-1px);
    }
}

.wheel{
    left: 50%;
    position: absolute;
    transform: translateX(-50%);
    z-index: 2;
    bottom: 170px;
}

.wheel img{
    width: 65px;
    height: 65px;
    animation: wheel 0.5s linear infinite;
}

@keyframes wheel{
    100%{
        transform: rotate(360deg);
    }
}

.back-wheel{
    left: -345px;
    position: absolute;
}

.front-wheel{
    left: -101px;
    position: absolute;
}


